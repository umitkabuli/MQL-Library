Part 2	Defines.mqh	received the order status to the ENUM_ORDER_PROP_INTEGER enumeration
Part 2	In Defines.mqh	re-arranged the list of order property enumerations for displaying in the journal
Part 2	Order.mqh	received OrderState(void) "Return order status" in the integer properties
Part 2	In Order.mqh	TypeOrder() method type changed to long
Part 2	To Order.mqh	added StateDescription(void) "Return order status description"
Part 2	In Order.mqh	added order status description to GetPropertyDescription(ENUM_ORDER_PROP_INTEGER property)
Part 2	To HistoryOrder.mqh	added the SupportProperty method (ENUM_ORDER_PROP_DOUBLE property)
Part 2	In HistoryOrder.mqh	added unsupported properties for MQL5 in the SupportProperty method (ENUM_ORDER_PROP_INTEGER property)

To do:
Change journal entries about new orders and deals during the first launch.
Add a queue of historical and market collections events so that messages about changes are not lost. 
Create a class for displaying messages with logging level flags in the journal.

======================================================================================================
Part 3 	
In 	Defines.mqh	ORDER_STATUS_MARKET_ACTIVE replaced with ORDER_STATUS_MARKET_POSITION
In	Engine		added m_list_of_events;       // Event queue list

======================================================================================================
Many things have changed due to separation. 
Below are the things that should be added:

Check the presence of a market order. If it is present, add the market order object to the collection

m_trade_event_code
======================================================================================================
Part 5
/*
Moved order objects to the Orders folder. 

In Order.mqh, replaced the path 
#include "..\Services\DELib.mqh" 
with 
#include "..\..\Services\DELib.mqh"

In HistoryCollection.mqh and MarketCollection.mqh, replaced the paths 
#include "Select.mqh"
#include "..\Objects\HistoryOrder.mqh"
#include "..\Objects\HistoryPending.mqh"
#include "..\Objects\HistoryDeal.mqh"
 with 
#include "..\Services\Select.mqh"
#include "..\Objects\Orders\HistoryOrder.mqh"
#include "..\Objects\Orders\HistoryPending.mqh"
#include "..\Objects\Orders\HistoryDeal.mqh"

In Defines.mqh, added collection IDs, 
collection lists are now inherited from CListObj to identify the lists
added DFUN_ERR_LINE for displaying error messages with a string number

In DELib.mqh, included the #include list <Arrays\ArrayLong.mqh>

In CEngine, replaced 
//--- Return the last (1) removed pending order, (2) historical market order, (3) historical market order by its ticket
with
//--- Return the last (1) removed pending order, (2) historical market order, (3) historical order (market or pending one) by its ticket
and replaced the GetHistoryOrder() method with receiving a market or pending order by a ticket
*/
//In CEngine constructor, added the check for the timer successful creation.
//Further on, the flag is to be returned to the control program's OnInit().

//The order removal block should be checked when the order is activated. In the removal block, check the absence of a deal for the order


======================================================================================================
//Part 6, 7

//all is done

======================================================================================================

In part 5 and CEngine constructor, added the check for the timer successful creation.
The flag should be returned to the control program's OnInit().

//Implement assigning extended comments to order objects

Implement the method of removing unnecessary control orders from the list in the CMarketCollection class using the DeleteOrderFromListControl method

//Implement position ID calculation in MQL4 - the ticket of the very first parent order
Implement the StopLimit order class in MQL4

When implementing graphics, keep in mind the probability to accidentally remove an object by pressing Backspace

/*
Decide how to send three prices (order, stop loss, take profit) at once to the chart from the modification event.
Add to EventModify:

private:
   double            m_price;                               // Price sent to an event
//--- (1) Convert double value into the specified long number byte, (2) Pack three double numbers to a resulting long value
   long              ConvertDataToByte(const double value,const uchar byte);
   long              PackThreeLevelsToLong(const double value1,const double value2,const double value3);

...

in the end:

//+------------------------------------------------------------------+
//| Convert double value into the specified long number byte         |
//+------------------------------------------------------------------+
long CEventModify::ConvertDataToByte(const double value,const uchar byte)
  {
   if(byte>2)
     {
      Print(DFUN,TextByLanguage("Ошибка. Значение byte должно быть в пределах 0 - 2","Error. The \"byte\" value should be between 0 - 2."));
      return 0;
     }
   return (long)value<<(16*byte);
  }
//+------------------------------------------------------------------+
//| Pack three double numbers into a resulting long value            |
//+------------------------------------------------------------------+
long CEventModify::PackThreeLevelsToLong(const double value1,const double value2,const double value3)
  {
   return((long)value1 | this.ConvertDataToByte(value2,1) | this.ConvertDataToByte(value3,2));
  }
//+------------------------------------------------------------------+

In Defines.mqh, insert the following for working with account events:
//+------------------------------------------------------------------+
//| List of account event flags                                      |
//+------------------------------------------------------------------+
enum ENUM_ACCOUNT_EVENT_FLAGS
  {
   ACCOUNT_EVENT_FLAG_NO_EVENT      =  0,                   // No event
   ACCOUNT_EVENT_FLAG_LEVERAGE      =  1,                   // Changing the leverage
   ACCOUNT_EVENT_FLAG_TRADE_ALLOWED =  2,                   // Changing permission to trade for the account
   ACCOUNT_EVENT_FLAG_TRADE_EXPERT  =  4,                   // Changing permission for auto trading for the account
   ACCOUNT_EVENT_FLAG_MARGIN_SO_CALL=  8,                   // Changing the Margin Call level
   ACCOUNT_EVENT_FLAG_MARGIN_SO_SO  =  16,                  // Changing the Stop Out level
   ACCOUNT_EVENT_FLAG_BALANCE       =  32,                  // The balance exceeds the specified change value +/-
   ACCOUNT_EVENT_FLAG_EQUITY        =  128,                 // The equity exceeds the specified change value +/-
  };
//+------------------------------------------------------------------+
//| List of account event flags                                      |
//+------------------------------------------------------------------+
enum ENUM_ACCOUNT_EVENT
  {
   ACCOUNT_EVENT_NO_EVENT,                                  // No event
   ACCOUNT_EVENT_LEVERAGE_INC,                              // Increasing the leverage
   ACCOUNT_EVENT_LEVERAGE_DEC,                              // Decreasing the leverage
   ACCOUNT_EVENT_TRADE_ALLOWED_ON,                          // Enabling trading for the account
   ACCOUNT_EVENT_TRADE_ALLOWED_OFF,                         // Disabling trading for the account
   ACCOUNT_EVENT_TRADE_EXPERT_ON,                           // Enabling auto trading for the account
   ACCOUNT_EVENT_TRADE_EXPERT_OFF,                          // Disabling auto trading for the account
   ACCOUNT_EVENT_MARGIN_SO_CALL_INC,                        // Increasing the Margin Call level
   ACCOUNT_EVENT_MARGIN_SO_CALL_DEC,                        // Decreasing the Margin Call level
   ACCOUNT_EVENT_MARGIN_SO_SO_INC,                          // Increasing the Stop Out level
   ACCOUNT_EVENT_MARGIN_SO_SO_DEC,                          // Decreasing the Stop Out level
   ACCOUNT_EVENT_BALANCE_INC,                               // The balance exceeds the specified value
   ACCOUNT_EVENT_BALANCE_DEC,                               // The balance falls below the specified value
   ACCOUNT_EVENT_EQUITY_INC,                                // The equity exceeds the specified value
   ACCOUNT_EVENT_EQUITY_DEC,                                // The equity falls below the specified value
  };
//+------------------------------------------------------------------+

Add the flags to AcconntsCollection:

   bool              m_is_account_event;                                // Account data event flag
   bool              m_is_change_leverage;                              // Leverage change flag
   bool              m_is_change_trade_allowed;                         // The flag changing the permission to trade for the current account from the server side
   bool              m_is_change_trade_expert;                          // The flag changing the permission to trade for an EA from the server side
   bool              m_is_change_margin_so_call;                        // Margin Call level change flag
   bool              m_is_change_margin_so_so;                          // Stop Out level change flag



*/

